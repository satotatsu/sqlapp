/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    // Apply the java Plugin to add support for Java.
	id('java')
	id('jacoco')
	id('java-library')
	id('java-test-fixtures')
	id('org.cadixdev.licenser')
	id('groovy')
	id('maven-publish')
	id('signing')
	id("io.freefair.lombok")
	id('eclipse')
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

javadoc {
	options {
		author=false
		locale='en_US'
		encoding=defaultEncoding
		docEncoding=defaultEncoding
		charSet=defaultEncoding
	}
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
	failOnError=false
	source = sourceSets.main.allJava
}

compileJava {
	options.encoding = defaultEncoding
	options.compilerArgs = [
		"-Xlint:unchecked", "-Xlint:deprecation", '-parameters'
//			, "--module-path", classpath.asPath
	]
}
compileTestJava {
	options.encoding = defaultEncoding
    options.compilerArgs = [
		"-Xlint:unchecked", "-Xlint:deprecation", '-parameters'
//			, "--module-path", classpath.asPath
    ]
//   classpath = files()
}

tasks.withType(JavaCompile) {
	options.encoding = defaultEncoding
}
tasks.withType(AbstractCompile) each { 
	it.options.encoding = defaultEncoding
}

tasks.withType(GroovyCompile) {
	groovyOptions.encoding = defaultEncoding
}

eclipseJdt.doLast {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=utf-8')
}

eclipse {
	project {
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		natures 'org.eclipse.buildship.core.gradleprojectnature'
	}
    classpath {
 		downloadSources = true
		downloadJavadoc = true
	}
    // Eclipse から "Refresh Gradle Project" を呼び出した時に実行されるタスク
    synchronizationTasks 'cleanEclipse', 'eclipse'
}

group = 'com.sqlapp'

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// For test
	testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '3.0'

//		testCompile "org.jmockit:jmockit:1.33"
//		testCompile "junit:junit-dep:4.11"
	testImplementation "cglib:cglib-nodep:3.3.0"
	testImplementation 'org.objenesis:objenesis:3.4'
	

	testImplementation(platform('org.junit:junit-bom:5.11.3'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
	testLogging {
		// テスト時の標準出力と標準エラー出力を表示する
		showStandardStreams = true
		// イベントを出力する (TestLogEvent)
		//events "started", "skipped", "passed", "failed", "standardOut", "standardError"
		events "skipped", "passed", "failed", "standardOut", "standardError"
		// 例外発生時の出力設定 (TestExceptionFormat)
		exceptionFormat = 'full'
	}
	jvmArgs(
    	"--add-opens", "java.base/java.lang=ALL-UNNAMED",
    	"--add-opens", "java.base/java.util=ALL-UNNAMED"
  	)
}

jacoco { toolVersion = "0.8.12" }

license {
	charset= defaultEncoding
	properties {
		year = project.inceptionYear
		name = project.developerName
		email = project.developerEmail
		program = project.baseName
	}
	skipExistingHeaders = false
	style {
		java = "JAVADOC"
	}
	header = project.file("../buildSrc/lgpl.template")
	exclude (['**/*.properties', '**/*.html', '**/*.css', '**/*.xml'])
//	matching(includes: (["**/*.java", "**/*.groovy"]), excludes: (["**/*.html", "**/*.properties"])){
//	}
}

task copyGradleLicense(type: Copy) {
	from file("../buildSrc/license/gradle.license")
	into './license'
}

task copyLicense(type: Copy) {
	from file("../buildSrc/license/COPYING")
	from file("../buildSrc/license/COPYING.LESSER")
	into './'
}

task copyLicenseText(type: Copy) {
	from file("../buildSrc/lgpl.template")
	into './'
	rename {filename->"LICENSE.txt"}
	expand([
		year: project.inceptionYear,
		name: project.developerName,
		email: project.developerEmail,
		program: project.baseName
	])
}

sourceSets {
	generated {
		java {
			srcDirs = ['src/main/generated/']
		}
	}
	main {
		resources {
			srcDirs = [ 'src/main/resources' ]
		}
	}
	test {
		resources {
			srcDirs = [ 'src/test/resources' ]
		}
	}
}

compileJava.dependsOn updateLicenses
