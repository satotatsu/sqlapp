/**
 * Copyright (C) 2007-2017 Tatsuo Satoh &lt;multisqllib@gmail.com&gt;
 *
 * This file is part of sqlapp-core.
 *
 * sqlapp-core is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sqlapp-core is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with sqlapp-core.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */

package com.sqlapp.jdbc;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * JDBCのConnectionをラップするクラス
 * 
 * @author satoh
 * 
 */
public class SqlappConnection extends AbstractConnection {

	/**
	 * コンストラクタ
	 * 
	 * @param nativeConnection
	 *            ラッピングするコネクション
	 */
	public SqlappConnection(Connection nativeConnection) {
		super(nativeConnection);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareStatement(java.lang.String)
	 */
	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		try{
			SqlappPreparedStatement stmt= new SqlappPreparedStatement(nativeObject.prepareStatement(sql),
					sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}
	
	protected void logSql(String sql,SQLException e){
		if(isErrorEnabled()){
			error(sql, e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareStatement(java.lang.String, int)
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		try{
			SqlappPreparedStatement stmt= new SqlappPreparedStatement(nativeObject.prepareStatement(sql,
					autoGeneratedKeys), sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareStatement(java.lang.String, int[])
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		try{
			SqlappPreparedStatement stmt= new SqlappPreparedStatement(nativeObject.prepareStatement(sql,
					columnIndexes), sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareStatement(java.lang.String,
	 * java.lang.String[])
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		try{
			SqlappPreparedStatement stmt= new SqlappPreparedStatement(nativeObject.prepareStatement(sql,
					columnNames), sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		try{
			SqlappPreparedStatement stmt= new SqlappPreparedStatement(nativeObject.prepareStatement(sql,
					resultSetType, resultSetConcurrency), sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareStatement(java.lang.String, int, int,
	 * int)
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		try{
			SqlappPreparedStatement stmt= new SqlappPreparedStatement(nativeObject.prepareStatement(sql,
					resultSetType, resultSetConcurrency, resultSetHoldability),
					sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareCall(java.lang.String)
	 */
	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		try{
			SqlappCallableStatement stmt= new SqlappCallableStatement(nativeObject.prepareCall(sql), sql,
					this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareCall(java.lang.String, int, int)
	 */
	@Override
	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		try{
			SqlappCallableStatement stmt=  new SqlappCallableStatement(nativeObject.prepareCall(sql,
					resultSetType, resultSetConcurrency), sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)
	 */
	@Override
	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		try{
			SqlappCallableStatement stmt=   new SqlappCallableStatement(nativeObject.prepareCall(sql,
					resultSetType, resultSetConcurrency, resultSetHoldability),
					sql, this);
			initializeChild(stmt);
			return stmt;
		} catch(SQLException e){
			logSql(sql, e);
			throw e;
		}
	}

	/**
	 * @param debug the debug to set
	 */
	@Override
	public void setDebug(boolean debug) {
		super.setDebug(debug);
	}
}
