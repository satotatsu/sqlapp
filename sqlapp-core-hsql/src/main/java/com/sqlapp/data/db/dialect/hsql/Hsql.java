/**
 * Copyright (C) 2007-2017 Tatsuo Satoh &lt;multisqllib@gmail.com&gt;
 *
 * This file is part of sqlapp-core-hsql.
 *
 * sqlapp-core-hsql is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sqlapp-core-hsql is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with sqlapp-core-hsql.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */

package com.sqlapp.data.db.dialect.hsql;

import static com.sqlapp.util.CommonUtils.LEN_16MB;
import static com.sqlapp.util.CommonUtils.LEN_1MB;

import java.util.function.Supplier;

import com.sqlapp.data.db.dialect.Dialect;
import com.sqlapp.data.db.dialect.hsql.metadata.HsqlCatalogReader;
import com.sqlapp.data.db.dialect.hsql.sql.HsqlSqlFactoryRegistry;
import com.sqlapp.data.db.dialect.hsql.util.HsqlSqlBuilder;
import com.sqlapp.data.db.dialect.hsql.util.HsqlSqlSplitter;
import com.sqlapp.data.db.metadata.CatalogReader;
import com.sqlapp.data.db.sql.SqlFactoryRegistry;

/**
 * HSQL
 * 
 * @author satoh
 * 
 */
public class Hsql extends Dialect {

	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = -9136120371865172504L;
	private static final long SIZE_MAX = Integer.MAX_VALUE;

	protected Hsql(final Supplier<Dialect> nextVersionDialectSupplier) {
		super(nextVersionDialectSupplier);
	}

	/**
	 * データ型の登録
	 */
	@Override
	protected void registerDataType() {
		// CHAR
		getDbDataTypes().addChar(SIZE_MAX);
		// VARCHAR
		getDbDataTypes().addVarchar(SIZE_MAX);
		// VARCHAR IGNORECASE
		getDbDataTypes().addVarcharIgnoreCase(SIZE_MAX);
		// LONG VARCHAR
		getDbDataTypes().addLongVarchar(SIZE_MAX).setDefaultLength(LEN_16MB);
		// BINARY
		getDbDataTypes().addVarBinary(SIZE_MAX);
		// LONG BINARY
		getDbDataTypes().addLongVarBinary(SIZE_MAX);
		// CLOB
		getDbDataTypes().addClob(SIZE_MAX).setDefaultLength(LEN_1MB);
		// BLOB
		getDbDataTypes().addBlob(SIZE_MAX).setDefaultLength(LEN_16MB);
		// Bit
		getDbDataTypes().addBit().setLiteralPrefix("B'").setLiteralSuffix("'");
		// Boolean
		getDbDataTypes().addBoolean().setLiteralPrefix("B'").setLiteralSuffix("'");
		// SByte
		getDbDataTypes().addTinyInt();
		// SMALLINT
		getDbDataTypes().addSmallInt();
		// Int
		getDbDataTypes().addInt().addFormats("INTEGER").setCreateFormat("INTEGER");
		// BIGINT
		getDbDataTypes().addBigInt();
		// UUID
		getDbDataTypes().addUUID().setAsVarcharType();
		// Double
		getDbDataTypes().addDouble().addFormats("REAL").addFormats("FLOAT");
		// Date
		getDbDataTypes().addDate().setLiteral("'", "'")
				.setDefaultValueLiteral(getCurrentDateFunction());
		// Time
		getDbDataTypes().addTime().setLiteral("'", "'")
				.setDefaultValueLiteral(getCurrentTimeFunction())
				.setMaxPrecision(9).setDefaultPrecision(0);
		// Timestamp
		getDbDataTypes().addTimestamp().setLiteral("'", "'")
				.setDefaultValueLiteral(getCurrentTimestampFunction())
				.setMaxPrecision(9).setDefaultPrecision(6);
		// Decimal
		getDbDataTypes().addDecimal();
		// Decimal
		getDbDataTypes().addNumeric();
	}

	/**
	 * DB製品名
	 */
	@Override
	public String getProductName() {
		return "HSQL";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sqlapp.data.db.dialect.DbDialect#getSimpleName()
	 */
	@Override
	public String getSimpleName() {
		return "hsql";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sqlapp.data.db.dialect.DbDialect#getCurrentDateFunction()
	 */
	@Override
	public String getCurrentDateFunction() {
		return "CURRENT_DATE";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sqlapp.data.db.dialect.DbDialect#getCurrentTimeFunction()
	 */
	@Override
	public String getCurrentTimeFunction() {
		return "LOCALTIME";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.sqlapp.data.db.dialect.DbDialect#getCurrentTimeFunctionWithTimezone()
	 */
	@Override
	public String getCurrentTimeWithTimeZoneFunction() {
		return "CURRENT_TIME";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sqlapp.data.db.dialect.DbDialect#getCurrentTimestampFunction()
	 */
	@Override
	public String getCurrentTimestampFunction() {
		return "LOCALTIMESTAMP";
	}

	@Override
	public String getSequenceNextValString(final String sequenceName) {
		return "select NEXT VALUE FOR " + sequenceName
				+ " from INFORMATION_SCHEMA.INFORMATION_SCHEMA_CATALOG_NAME";
	}

	/**
	 * 現在日時(Timestamp)タイムゾーン付きの取得関数
	 * 
	 */
	@Override
	public String getCurrentTimestampWithTimeZoneFunction() {
		return "CURRENT_TIMESTAMP";
	}

	@Override
	public boolean supportsIdentity() {
		return true;
	}

	/**
	 * IDENTITYカラム作成時の構文
	 * 
	 */
	@Override
	public String getIdentityColumnString() {
		return "GENERATED BY DEFAULT AS IDENTITY";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sqlapp.data.db.dialect.DbDialect#getCatalogReader()
	 */
	@Override
	public CatalogReader getCatalogReader() {
		return new HsqlCatalogReader(this);
	}

	@Override
	public int hashCode() {
		return getProductName().hashCode();
	}

	@Override
	public boolean equals(final Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		return true;
	}

	@Override
	public SqlFactoryRegistry createSqlFactoryRegistry() {
		return new HsqlSqlFactoryRegistry(this);
	}
	
	@Override
	public HsqlSqlBuilder createSqlBuilder(){
		return new HsqlSqlBuilder(this);
	}
	
	@Override
	public HsqlSqlSplitter createSqlSplitter(){
		return new HsqlSqlSplitter(this);
	}

}
